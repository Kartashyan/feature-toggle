'use strict';

// tests for updateFeature
// Generated by serverless-jest-plugin

const mod = require('../handler');
const { resetDb } = require('./helpers');
const db = require('../database');
const jestPlugin = require('serverless-jest-plugin');
const { features: { tableName } } = require('../config');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'updateFeature' });

describe('updateFeature', () => {
  beforeAll(() => {
    return resetDb()
  });
  let features = [
    {
      name: 'dessert1',
      enabled: true
    },
    {
      name: 'dessert2',
      enabled: false
    },
  ];
  it('should respond with an appropriate error when the event.body is empty', async () => {
    const expected = {
      statusCode: 400,
      body: "No data provided"
    };

    let response = await wrapped.run({});
    expect(response).toEqual(expect.objectContaining(expected))
  });

  it('should respond with an appropriate error when the enabled is missing in the body', async () => {
    const expected = {
      statusCode: 400,
      body: "No feature state provided"
    };
    
    const response = await wrapped.run({
      body: JSON.stringify({}),
      pathParameters: { name: features[0].name }
    });
    expect(response).toEqual(expect.objectContaining(expected))
  });

  it('should update item in DB', async () => {
    for (const feature of features) {
      await db.put({ TableName: tableName, Item: feature }).promise();
    }

    const response = await wrapped.run({
      body: JSON.stringify({ enabled: false }),
      pathParameters: { name: features[0].name }
    });
    expect(response).toBeDefined();
    expect(response).toEqual(expect.objectContaining({
      statusCode: 200,
      body: JSON.stringify({ message: 'Updated!' }),
    }));

    const result = await db.get({ TableName: tableName, Key: { name: features[0].name } }).promise();
    expect(result.Item.enabled).toEqual(false);
  });
});
