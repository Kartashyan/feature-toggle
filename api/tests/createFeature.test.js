'use strict';

// tests for createFeature
// Generated by serverless-jest-plugin

const mod = require('../handler');

const db = require('../database');
const { resetDb } = require('./helpers');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'createFeature' });

describe('createFeature', () => {
  beforeEach(() => {
    return resetDb();
  });

  it('should respond with an appropriate error when the event.body is empty', async () => {
    const expected = {
      statusCode: 400,
      body: "No data provided"
    };

    let response = await wrapped.run({});
    expect(response).toEqual(expect.objectContaining(expected))
  });

  it('should respond with an appropriate error when the name is missing in the body', async () => {
    const expected = {
      statusCode: 400,
      body: "No feature name provided"
    };
    let response = await wrapped.run({ body: JSON.stringify({}) });
    expect(response).toEqual(expect.objectContaining(expected))
  });

  it('should respond with an success message when the name is provided in the body and successfully added to dynamoDB', async () => {
    const featureName = 'dessert';
    let response = await wrapped.run({ body: JSON.stringify({ name: featureName }) });

    expect(response).toEqual(expect.objectContaining({
      statusCode: 200,
      body: JSON.stringify({
        message: 'Success!'
      })
    }));
    const result = await db.get({ TableName: process.env.FEATURES_TABLE, Key: { name: featureName } }).promise();
    expect(result.Item.name).toEqual(featureName);
  });

});
